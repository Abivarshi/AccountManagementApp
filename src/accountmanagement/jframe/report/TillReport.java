/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package accountmanagement.jframe.report;

import accountmanagement.jframe.*;
import accountmanagement.database.DataBaseConnection;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author acer
 */
public class TillReport extends javax.swing.JPanel {

    DataBaseConnection db = new DataBaseConnection();
    private final String shopName;
    /**
     * Creates new form Till
     */
    public TillReport(String shopName) {
        this.shopName = shopName;
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jDateChooserFrom = new com.toedter.calendar.JDateChooser();
        jLabel2 = new javax.swing.JLabel();
        searchButton = new javax.swing.JButton();
        jDateChooserTo = new com.toedter.calendar.JDateChooser();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        warningLabel = new javax.swing.JLabel();

        setBackground(new java.awt.Color(255, 255, 255));
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jDateChooserFrom.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        add(jDateChooserFrom, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 40, 161, -1));

        jLabel2.setBackground(new java.awt.Color(255, 255, 255));
        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        jLabel2.setText("From Date");
        add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(34, 38, 80, 20));

        searchButton.setBackground(new java.awt.Color(0, 0, 102));
        searchButton.setForeground(new java.awt.Color(255, 255, 255));
        searchButton.setText("Search");
        searchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchButtonActionPerformed(evt);
            }
        });
        add(searchButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(650, 40, 90, 30));

        jDateChooserTo.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        add(jDateChooserTo, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 40, 161, -1));

        jLabel3.setBackground(new java.awt.Color(255, 255, 255));
        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        jLabel3.setText("To Date");
        add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 40, 80, 20));

        jTable1.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Type", "Date", "Yesterday Till Count", "Today Till Count", "Cash", "Coin", "Card", "Voucher Milk", "Voucher Pay Point", "Refund Goods", "Refund Services", "Refund Account Credit", "Purchase", "Expenditure", "Acc Pay", "Cash Back", "Instant PayOut", "Lottary PayOut", "Ins Lottary", "Lottary", "Oyster", "Pay Point", "PayZone", "Over/Short Till", "Over/Short Pay/Payzone/Bus"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.setPreferredSize(new java.awt.Dimension(1800, 64));
        jTable1.setRowSelectionAllowed(false);
        jScrollPane1.setViewportView(jTable1);
        if (jTable1.getColumnModel().getColumnCount() > 0) {
            jTable1.getColumnModel().getColumn(0).setResizable(false);
            jTable1.getColumnModel().getColumn(1).setResizable(false);
            jTable1.getColumnModel().getColumn(2).setResizable(false);
            jTable1.getColumnModel().getColumn(3).setResizable(false);
            jTable1.getColumnModel().getColumn(4).setResizable(false);
            jTable1.getColumnModel().getColumn(5).setResizable(false);
            jTable1.getColumnModel().getColumn(6).setResizable(false);
            jTable1.getColumnModel().getColumn(7).setResizable(false);
            jTable1.getColumnModel().getColumn(8).setResizable(false);
            jTable1.getColumnModel().getColumn(9).setResizable(false);
            jTable1.getColumnModel().getColumn(10).setResizable(false);
            jTable1.getColumnModel().getColumn(11).setResizable(false);
            jTable1.getColumnModel().getColumn(12).setResizable(false);
            jTable1.getColumnModel().getColumn(13).setResizable(false);
            jTable1.getColumnModel().getColumn(14).setResizable(false);
            jTable1.getColumnModel().getColumn(15).setResizable(false);
            jTable1.getColumnModel().getColumn(16).setResizable(false);
            jTable1.getColumnModel().getColumn(17).setResizable(false);
            jTable1.getColumnModel().getColumn(18).setResizable(false);
            jTable1.getColumnModel().getColumn(19).setResizable(false);
            jTable1.getColumnModel().getColumn(20).setResizable(false);
            jTable1.getColumnModel().getColumn(21).setResizable(false);
            jTable1.getColumnModel().getColumn(22).setResizable(false);
            jTable1.getColumnModel().getColumn(23).setResizable(false);
            jTable1.getColumnModel().getColumn(24).setResizable(false);
        }

        jScrollPane1.setHorizontalScrollBarPolicy(
            javax.swing.JScrollPane.HORIZONTAL_SCROLLBAR_ALWAYS);
        jScrollPane1.setVerticalScrollBarPolicy(
            javax.swing.JScrollPane.VERTICAL_SCROLLBAR_ALWAYS);

        add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 110, 830, 480));

        warningLabel.setForeground(new java.awt.Color(153, 0, 0));
        add(warningLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(540, 80, 248, 19));
    }// </editor-fold>//GEN-END:initComponents

    private void searchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButtonActionPerformed
        DefaultTableModel tbModel = (DefaultTableModel) jTable1.getModel();
        tbModel.setRowCount(0);
        Date currentDate = new Date();
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
        if (jDateChooserFrom.getDate() == null) {
            jDateChooserFrom.setDate(currentDate);
        }
        if (jDateChooserTo.getDate() == null) {
            jDateChooserTo.setDate(currentDate);
        }
        String fromDate = sdf.format(jDateChooserFrom.getDate());
        String toDate = sdf.format(jDateChooserTo.getDate());
        if (fromDate.compareTo(toDate) < 0 || fromDate.compareTo(toDate) == 0) {
            ResultSet res = db.getValuesTabTable(shopName, "TillReport", sdf.format(jDateChooserFrom.getDate()), sdf.format(jDateChooserTo.getDate()));
            ResultSetMetaData metadata = db.getTabColumns(shopName, "TillReport");
            ResultSet resBackOffice = db.getValuesTabTable(shopName, "TillBackOffice", sdf.format(jDateChooserFrom.getDate()), sdf.format(jDateChooserTo.getDate()));
            ResultSetMetaData metadataBackOffice = db.getTabColumns(shopName, "TillBackOffice");
            try {
                while (res.next()) {
                    String dateCol = metadataBackOffice.getColumnName(2);
                    float cashDiff = 0;
                    float tillOver=0;
                    float otherOver=0;
                    String date = res.getString(dateCol);
                    System.out.println(date);
                    List<String> values = new ArrayList();
                    values.add("From Report");
                    values.add(date);
                    
                    String dateBackOffice = resBackOffice.getString(dateCol);
                    List<String> valuesBackOffice = new ArrayList();
                    valuesBackOffice.add("From Back Office");
                    valuesBackOffice.add(dateBackOffice);
                    
                    List<String> valuesDiff= new ArrayList();
                    valuesDiff.add("Short/Over");
                    valuesDiff.add(dateBackOffice);
                    
                    for (int i = 3; i <= metadata.getColumnCount(); i++) {
                        String columnName = metadataBackOffice.getColumnName(i);
                        Float value = res.getFloat(columnName);
                        values.add(value.toString());
                        Float valueBackOffice = resBackOffice.getFloat(columnName);
                        valuesBackOffice.add(valueBackOffice.toString());
                        if(i==3){
                            cashDiff = cashDiff-value-valueBackOffice;
                        }
                        if(i==4){
                            cashDiff = cashDiff+value+valueBackOffice;
                        }
                        if(i==6){
                            cashDiff = cashDiff+value;
                        }
                        if(i>9 && i<12){
                            cashDiff = cashDiff+value;
                        }
                        if(i>12 && i<15){
                            cashDiff = cashDiff+value;
                        }
                        if((i>6 && i<10)||i==12||(i>14 && i<19)){
                            Float valueDiff=value-valueBackOffice;
                            valuesDiff.add(valueDiff.toString());
                            if(i==7 || i==8 || i==17 || i==18){
                                tillOver=tillOver+valueDiff; 
                            }
                        }else if(i>19 && i<24){
                            Float valueDiff=valueBackOffice-value;
                            valuesDiff.add(valueDiff.toString());
                            otherOver=otherOver+valueDiff;
                        }
                        else if(i==5){
                            cashDiff = cashDiff+value-valueBackOffice;
                        }
                        else{
                            valuesDiff.add("");
                        }
                    }
                    tillOver=tillOver+cashDiff;
                    values.add(String.valueOf(tillOver));
                    values.add(String.valueOf(otherOver));
                    valuesDiff.add(4,String.valueOf(cashDiff));
                    tbModel.addRow(values.toArray());
                    tbModel.addRow(valuesBackOffice.toArray());
                    tbModel.addRow(valuesDiff.toArray());
                    
                }
            } catch (SQLException ex) {
                Logger.getLogger(BankReport.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            warningLabel.setText("From Date should be earlier date");
        }
    }//GEN-LAST:event_searchButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private com.toedter.calendar.JDateChooser jDateChooserFrom;
    private com.toedter.calendar.JDateChooser jDateChooserTo;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JButton searchButton;
    private javax.swing.JLabel warningLabel;
    // End of variables declaration//GEN-END:variables
}
